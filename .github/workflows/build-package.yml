# .github/workflows/build-package.yml

name: Build and Package Application

# This allows you to run this workflow manually from the Actions tab
on:
  workflow_dispatch:
    # This adds an input field on the "Run workflow" page
    inputs:
      gemini_api_key:
        description: 'Your Gemini API Key'
        required: true

jobs:
  build:
    # This strategy creates a "matrix" to run the same job on different OSes
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    # Use the OS from the matrix for the runner
    runs-on: ${{ matrix.os }}

    steps:
    # Step 1: Check out your repository code so the workflow can access it
    - name: Check out repository
      uses: actions/checkout@v4

    # Step 2: Set up the Python environment
    - name: Set up Python 3.9
      uses: actions/setup-python@v5
      with:
        python-version: 3.9

    # Step 3: Install your project's dependencies
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        # Added pyfiglet here to ensure it's available for the build
        pip install google-genai python-dotenv pyinstaller pyfiglet rich

    # Step 4: Build the executable with PyInstaller
    - name: Build with PyInstaller
      # Use bash shell for all OSes for consistent scripting
      shell: bash
      run: |
        # Find the path to the pyfiglet fonts directory dynamically
        PYFIGLET_PATH=$(python -c "import pyfiglet.fonts; print(pyfiglet.fonts.__path__[0])")

        # Set the correct path separator for the --add-data flag based on the OS
        if [[ "${{ runner.os }}" == "Windows" ]]; then
          SEPARATOR=";"
        else
          SEPARATOR=":"
        fi

        echo "PyFiglet fonts path: ${PYFIGLET_PATH}"
        echo "Using separator: ${SEPARATOR}"

        # Build the application with the required flags for pyfiglet
        pyinstaller --onefile --name prompt-wars main.py \
          --hidden-import "pyfiglet.fonts" \
          --add-data "${PYFIGLET_PATH}${SEPARATOR}pyfiglet/fonts"

    # Step 5: Create the Windows runner script (only runs on the Windows builder)
    - name: Create Windows Runner (run.bat)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        $bat_content = @"
        @echo off
        set GEMINI_API_KEY=${{ github.event.inputs.gemini_api_key }}
        cls
        if not exist "prompt-wars.exe" (
            echo Error: 'prompt-wars.exe' not found.
            pause
            exit
        )
        echo API Key is set. Launching tool...
        echo ----------------------------------------
        prompt-wars.exe
        pause
        "@
        Set-Content -Path dist/run.bat -Value $bat_content

    # Step 6: Create the Linux/macOS runner script (runs on non-Windows builders)
    - name: Create Linux/macOS Runner (run.sh)
      if: runner.os != 'Windows'
      run: |
        echo '#!/bin/bash' > dist/run.sh
        echo 'export GEMINI_API_KEY="${{ github.event.inputs.gemini_api_key }}"' >> dist/run.sh
        echo 'if [ ! -f "prompt-wars" ]; then echo "Error: '\''prompt-wars'\'' not found."; exit 1; fi' >> dist/run.sh
        echo 'echo "API Key is set. Launching tool..."' >> dist/run.sh
        echo 'echo "----------------------------------------"' >> dist/run.sh
        echo './prompt-wars' >> dist/run.sh
        chmod +x dist/run.sh

    # Step 7: Upload the executable as a downloadable artifact
    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: prompt-wars-package-${{ matrix.os }}
        path: dist/